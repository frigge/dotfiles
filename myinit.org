* c++
** cmake-ide
#+begin_src emacs-lisp
  (use-package cmake-ide
               :ensure t
               :config (cmake-ide-setup))
#+end_src

** rtags
#+begin_src emacs-lisp
  (use-package rtags
               :ensure t
               :config (custom-set-variables
                         '(rtags-autostart-diagnostics t)
                         '(rtags-completions-enabled t)
                         '(rtags-display-current-error-as-tooltip t)
                         '(rtags-use-helm t))
               (rtags-enable-standard-keybindings))
#+end_src

** TODO clang-format
* helm
#+begin_src emacs-lisp
      (use-package helm
                   :ensure t
                   :bind ("M-x" . helm-M-x))
#+end_src
* evil
#+begin_src emacs-lisp
    (use-package evil
      :ensure t
      :config (evil-mode t))

    (use-package evil-org
      :ensure t)

    (use-package evil-numbers
      :ensure t
      :bind (:map evil-normal-state-map
			       ("+" . evil-numbers/inc-at-pt)
			       ("-" . evil-numbers/dec-at-pt)
             :map evil-visual-state-map
			       ("+" . evil-numbers/inc-at-pt)
			       ("-" . evil-numbers/dec-at-pt)))

    (use-package evil-quickscope
      :ensure t
      :config (global-evil-quickscope-mode t))

    (use-package evil-surround
      :ensure t
      :config (global-evil-surround-mode 1))
  

    (use-package evil-visualstar
      :ensure t
      :config (global-evil-visualstar-mode t))
#+end_src

** don't use SPC and RET as motion keys in normal mode
#+begin_src emacs-lisp
  (defun my-move-key (keymap-from keymap-to key)
    "Moves key binding from one keymap to another, deleting from the old location. "
    (define-key keymap-to key (lookup-key keymap-from key))
    (define-key keymap-from key nil))
  (my-move-key evil-motion-state-map evil-normal-state-map (kbd "RET"))
  (my-move-key evil-motion-state-map evil-normal-state-map " ")
#+end_src
  
** SPC as leader key in evil normal mode

#+begin_src emacs-lisp
  (define-prefix-command 'space-map)
  (define-key evil-normal-state-map (kbd "SPC") 'space-map)
  (define-key evil-motion-state-map (kbd "SPC") 'space-map)
  (define-key space-map (kbd "x") 'helm-M-x)
  (define-key space-map (kbd "b") 'ido-switch-buffer)
  (define-key space-map (kbd "f") 'ido-find-file)
#+end_src

* gui
** misc
#+begin_src emacs-lisp
  (custom-set-variables
   '(blink-cursor-mode nil)
   '(tab-width 4)
   '(inhibit-startup-screen t)
   '(line-number-mode t)
   '(scroll-bar-mode nil)
   '(show-paren-mode t)
   '(tool-bar-mode nil)
   '(menu-bar-mode nil)
   '(custom-buffer-indent 4)
   '(global-hl-line-mode t)
   '(global-auto-revert-mode t)
   '(indent-tabs-mode nil)
   '(c-basic-offset 4)
   '(c-default-style
	 (quote
      ((java-mode . "java")
       (awk-mode . "awk")
	   (python-mode . "python")
       (other . "stroustrup")))))

  (global-set-key (kbd "<f4>") 'ff-find-other-file)
#+end_src

*** beacon-mode
#+begin_src emacs-lisp
  (use-package beacon
               :ensure t
               :config (beacon-mode))
#+end_src

** ido
#+begin_src emacs-lisp
  (use-package ido
    :ensure t
    :config (ido-mode))

  (global-set-key (kbd "C-x C-f") 'ido-find-file)
  (global-set-key (kbd "C-x b") 'ido-switch-buffer)
#+end_src

** ace-window
#+begin_src emacs-lisp
  (use-package ace-window
    :ensure t
    :bind ("C-x o" . ace-window)
    :config (custom-set-variables
             '(ace-window-display-mode t)))
#+end_src

** font
#+begin_src emacs-lisp
(custom-set-faces
 '(default ((t (:height 100 :foundry "DAMA" :family "Consolas")))))
#+end_src

** theme
#+begin_src emacs-lisp
  (use-package solarized-theme
    :ensure t
    :config (load-theme 'solarized-dark t))
#+end_src

#+RESULTS:
: t

** company
#+begin_src emacs-lisp
  (use-package company
               :ensure t
               :config ((custom-set-variables
                         '(completion-on-separator-character t)
                         '(company-backends
                           (quote
                            (company-bbdb
                             company-nxml
                             company-css
                             company-semantic
                             company-cmake
                             company-capf
                             company-dabbrev-code
                             company-gtags
                             company-etags
                             company-keywords
                             company-oddmuse
                             company-files
                             company-dabbrev))))
                        (global-company-mode))
                        :bind ("<C-tab>" . company-complete))
#+end_src

** which-key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config (setq which-key-mode t))
#+end_src

** git-gutter
#+begin_src emacs-lisp
  (use-package git-gutter
    :ensure t
    :config (setq global-git-gutter+-mode t))
#+end_src

* orgmode
** org-pomodoro
#+begin_src emacs-lisp
  (use-package org-pomodoro
    :ensure t
    :bind (:map space-map ("o p" . org-pomodoro)))
#+end_src

** org-ref
#+begin_src emacs-lisp
  (use-package org-ref
	:ensure t)

  (require 'doi-utils)
  (require 'org-ref-pdf)
  (require 'org-ref-url-utils)
  (require 'org-ref-bibtex)
  (require 'org-ref-latex)
  (require 'org-ref-arxiv)
  (require 'org-ref-isbn)
  (require 'org-ref-wos)
  (require 'org-ref-scopus)
  (require 'x2bib)
  (require 'nist-webbook)
  (require 'org-ref-citeproc)
  (require 'unsrt)
#+end_src

** capture
#+begin_src emacs-lisp
(define-key space-map (kbd "c c") 'org-capture)
#+end_src
** agenda
#+begin_src emacs-lisp
  (custom-set-variables
   '(org-agenda-files
     (quote
      ("~/informatik_master/padi/notes.org"
       "~/informatik_master/seminar/notes.org"
       "~/informatik_master/algorithm_engineering/notes.org"
       "~/informatik_master/echtzeitcomputergrafik/notes.org"
       "~/informatik_master/multimedia_database/notes.org"
       "~/informatik_master/3dcomputersehen/notes.org"
       "~/my_agenda/agenda.org"))))
#+end_src

** export
#+begin_src emacs-lisp
(custom-set-variables
 '(org-babel-load-languages (quote ((python . t) (emacs-lisp . t))))
 '(org-latex-pdf-process
   (quote
    ("pdflatex -interaction nonstopmode -output-directory %o %f" "bibtex %b" "pdflatex -interaction nonstopmode -output-directory %o %f" "pdflatex -interaction nonstopmode -output-directory %o %f")))
 '(org-src-fontify-natively t))

(require 'ox-latex)
(add-to-list
 'org-latex-classes
 '("dinbrief"
   "\\documentclass[12pt]{dinbrief}
\[DEFAULT-PACKAGES]
\[PACKAGES]
\[EXTRA]"))
#+end_src

** caldav
#+begin_src emacs-lisp
  (use-package org-caldav
	:ensure t
	:config (custom-set-variables 
			 '(org-caldav-url "http://frgcloud.selfhost.eu/owncloud/remote.php/caldav/calendars/piland")
			 '(org-caldav-calendar-id "orgmode-agenda")
			 '(org-caldav-select-tags '("AGENDA"))
			 '(org-caldav-inbox "~/my_agenda/caldav.org")))
#+end_src

** misc
#+begin_src emacs-lisp
(plist-put org-format-latex-options :scale 1.5)
#+end_src

* email
#+begin_src emacs-lisp
(custom-set-variables
 '(send-mail-function (quote smtpmail-send-it))
 '(smtpmail-smtp-server "groupware.tu-bs.de")
 '(smtpmail-smtp-service 465)
 '(smtpmail-stream-type (quote ssl))
 '(user-full-name "Sascha Fricke")
 '(user-mail-address "Sascha Fricke <s.fricke@tu-bs.de>")
)
#+end_src
** notmuch
#+begin_src emacs-lisp
  (use-package notmuch
    :ensure t
    :config (setq notmuch-address-command "notmuch-address"))
#+end_src
** offlineimap
#+begin_src emacs-lisp
  (use-package offlineimap
    :ensure t)
#+end_src
* projectile
#+begin_src emacs-lisp
  (use-package projectile
:ensure t
    :config (setq projectile-mode t))
#+end_src

** org-projectile
#+begin_src emacs-lisp
    (use-package org-projectile
      :ensure t
      :bind (:map space-map ("c p" . org-projectile:project-todo-completing-read))
                  :config (progn
                            (org-projectile:per-repo)
                            (setq org-projectile:per-repo-filename "project_todo.org")
                            (setq org-agenda-files (append org-agenda-files (org-projectile:todo-files)))))
#+end_src

* ag
#+begin_src emacs-lisp
  (use-package ag
    :ensure t
    :config (setq ag-group-matches nil))
#+end_src

* wgrep
#+begin_src emacs-lisp
  (use-package wgrep
    :ensure t)
  (use-package wgrep-ag
    :ensure t)
#+end_src

* ctags
#+begin_src emacs-lisp
  (custom-set-variables
   '(ctags-update-command "ctags")
   '(ctags-update-delay-seconds 10)
   '(ctags-update-other-options
     (quote
      ("--fields=+iaSt"
       "--extra=+q"
       "--exclude='*.elc'"
       "--exclude='*.class'"
       "--exclude='.git'"
       "--exclude='.svn'"
       "--exclude='SCCS'"
       "--exclude='RCS'"
       "--exclude='CVS'"
       "--exclude='EIFGEN'"
       "-R"
       "-e"))))
#+end_src

* flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :config (custom-set-variables
             '(global-flycheck-mode t)
             '(flycheck-clang-language-standard "c++14")))
#+end_src

* magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t)
#+end_src 

smerge
#+begin_src emacs-lisp
  (require 'smerge-mode)
  (define-key space-map (kbd "s s") 'smerge-mode)

  (defun my-smerge-bindings ()
    (define-key space-map (kbd "s RET") 'smerge-keep-current)
    (define-key space-map (kbd "s d m") 'smerge-diff-base-mine)
    (define-key space-map (kbd "s d o") 'smerge-diff-base-other)
    (define-key space-map (kbd "s d b") 'smerge-diff-mine-other)

    (define-key space-map (kbd "s C") 'smerge-combine-with-next)
    (define-key space-map (kbd "s E") 'smerge-ediff)
    (define-key space-map (kbd "s R") 'smerge-refine)
    (define-key space-map (kbd "s a") 'smerge-keep-all)
    (define-key space-map (kbd "s b") 'smerge-keep-base)
    (define-key space-map (kbd "s m") 'smerge-keep-mine)
    (define-key space-map (kbd "s n") 'smerge-next)
    (define-key space-map (kbd "s o") 'smerge-keep-other)
    (define-key space-map (kbd "s p") 'smerge-prev)
    (define-key space-map (kbd "s r") 'smerge-resolve))

  (add-hook 'smerge-mode-hook 'my-smerge-bindings)
#+end_src 
* extra file type modes
** cuda-mode
#+begin_src emacs-lisp
  (use-package cuda-mode
    :ensure t)
#+end_src

** opencl-mode
#+begin_src emacs-lisp
  (use-package opencl-mode
    :ensure t)
#+end_src

** glsl-mode
#+begin_src emacs-lisp
  (use-package glsl-mode
    :ensure t)
#+end_src

* start in eshell
#+begin_src emacs-lisp
(eshell)
#+end_src
