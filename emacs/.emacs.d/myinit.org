#+Title: Emacs Configuration

* misc
   Add ~/.emacs.d to load path
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/modules/")
#+end_src


** undo-tree
#+begin_src emacs-lisp
(use-package undo-tree
  :ensure t
  :config (global-undo-tree-mode))
#+end_src
   
** pixel scrolling
 #+begin_src emacs-lisp
   (pixel-scroll-mode)
 #+end_src
   
** start in eshell

 #+begin_src emacs-lisp
   (eshell)
 #+end_src

** single window with i3
 #+begin_src emacs-lisp
   (setq pop-up-frames 'graphic-only)
 #+end_src

** bookmarks
 # #+begin_src emacs-lisp
 #     (define-key space-map (kbd "b") 'helm-filtered-bookmarks)
 # #+end_src

** CSV mode
 #+begin_src emacs-lisp
(use-package csv-mode
  :ensure t)
 #+end_src
 
** Use gtklp as Printer
#+begin_src emacs-lisp
(setq lpr-command "gtklp")
(setq ps-lpr-command "gtklp")
(setq pdf-misc-print-programm "gtklp")
(setq pdf-misc-print-programm-args "")
#+end_src

** create compilation buffer with custom name
#+begin_src emacs-lisp
(defun compile-and-rename (cmd name) ""
       (if (get-buffer name)
           (progn (set-buffer name)
                  (recompile))
         (progn (compile cmd)
                (set-buffer "*compilation*")
                (rename-buffer name))))
#+end_src

** hide mode line
#+begin_src emacs-lisp
(use-package hide-mode-line
  :config (add-hook 'completion-list-mode-hook #'hide-mode-line-mode))
#+end_src

* yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :config (yas-global-mode 1)
  :ensure t)

(use-package yasnippet-snippets
  :ensure t)
#+end_src

* helm
#+begin_src emacs-lisp
(use-package helm
  :ensure t)
#+end_src

* evil
#+begin_src emacs-lisp
(use-package evil
  :config (evil-mode t)
  :ensure t)

(use-package evil-org
  :ensure t
  :after org
  :hook (org-mode . evil-org-mode))

(use-package evil-numbers
  :ensure t
  :bind (:map evil-normal-state-map
			  ("+" . evil-numbers/inc-at-pt)
			  ("-" . evil-numbers/dec-at-pt)
			  :map evil-visual-state-map
			  ("+" . evil-numbers/inc-at-pt)
			  ("-" . evil-numbers/dec-at-pt)))

(use-package evil-quickscope
  :ensure t
  :config (global-evil-quickscope-mode t))

(use-package evil-surround
  :ensure t
  :config (global-evil-surround-mode 1))


(use-package evil-visualstar
  :ensure t
  :config (global-evil-visualstar-mode t))

(use-package evil-commentary
  :ensure t
  :config (evil-commentary-mode t))

(use-package evil-string-inflection
  :ensure t)
#+end_src

** don't use SPC and RET as motion keys in normal mode
#+begin_src emacs-lisp
  (defun my-move-key (keymap-from keymap-to key)
	"Moves key binding from one keymap to another, deleting from the old location. "
	(define-key keymap-to key (lookup-key keymap-from key))
	(define-key keymap-from key nil))
  (my-move-key evil-motion-state-map evil-normal-state-map (kbd "RET"))
  (my-move-key evil-motion-state-map evil-normal-state-map " ")
#+end_src
  
** SPC as leader key in evil normal mode

#+begin_src emacs-lisp
  (define-prefix-command 'space-map)
  (define-key evil-normal-state-map (kbd "SPC") 'space-map)
  (define-key evil-motion-state-map (kbd "SPC") 'space-map)
  (define-key space-map (kbd "x") 'counsel-M-x)
  ;; (define-key space-map (kbd "b") 'ivy-switch-buffer)
  (define-key space-map (kbd "f") 'counsel-find-file)
  (define-key space-map (kbd "o") 'ace-window)
  (define-key space-map (kbd "0") 'delete-window)
  (define-key space-map (kbd "1") 'delete-other-windows)
  (define-key space-map (kbd "2") 'split-window-below)
  (define-key space-map (kbd "3") 'split-window-right)
  (define-key space-map (kbd "/") 'swiper)
#+end_src

* gui
** misc
#+begin_src emacs-lisp
(setq blink-cursor-mode nil)
(setq inhibit-startup-screen t)
(setq line-number-mode t)
(scroll-bar-mode -1)
(show-paren-mode)
(tool-bar-mode -1)
(menu-bar-mode -1)
(set-fringe-mode 10)
(column-number-mode)
(setq global-hl-line-mode t)
(setq global-auto-revert-mode t)
(setq global-visual-line-mode t)

(global-set-key (kbd "<f4>") 'ff-find-other-file)
;; (recentf-mode)
#+end_src

*** rainbow mode
#+begin_src emacs-lisp
  (use-package rainbow-mode
	:ensure t
	:bind (:map space-map ("h h" . rainbow-mode)))
#+end_src
*** display inline images
#+begin_src emacs-lisp
  (auto-image-file-mode)
#+end_src

*** indent tabs
#+begin_src emacs-lisp
  (use-package smart-tabs-mode
  :ensure t)
  (add-hook 'c-mode-common-hook (lambda () (setq indent-tabs-mode t)))
  ;; (smart-tabs-insinuate 'c 'c++)
  ;; (setq smart-tabs-mode t)
#+end_src

whitespace mode toggle
#+begin_src emacs-lisp
  (define-key space-map (kbd "w w") 'whitespace-mode)
#+end_src

*** beacon-mode
#+begin_src emacs-lisp
  (use-package beacon
  :config (beacon-mode)
  :ensure t)
#+end_src

** ido
#+begin_src emacs-lisp
(use-package ido
  :config (ido-mode)
  :disabled t)

;; (global-set-key (kbd "C-x C-f") 'ido-find-file)
;; (global-set-key (kbd "C-x b") 'ido-switch-buffer)
#+end_src

** ace-window
#+begin_src emacs-lisp
	(use-package ace-window
	  :bind ("C-x o" . ace-window)
	  :config (setq ace-window-display-mode t)
	  (setq aw-scope 'frame))
#+end_src

** font
#+begin_src emacs-lisp
(custom-set-faces
 '(default ((t (:height 98 :foundry "DAMA" :family "Consolas for Powerline")))))
#+end_src

** visual-column-fill
#+begin_src emacs-lisp
(defun efs/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
		visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . efs/org-mode-visual-fill))
  #+end_src

** theme
#+begin_src emacs-lisp
(use-package xresources-theme
  :disabled t)
#+end_src

#+RESULTS:
: t

Toggle light and dark theme. Light and dark theme can be customized by setting ~my-dark-theme~ and ~my-light-theme~.

#+begin_src emacs-lisp :tangle no
(defcustom my-dark-theme 'solarized-dark "current dark theme")
(defcustom my-light-theme 'solarized-light "current light theme")
(defcustom my-current-theme (symbol-value 'my-light-theme) "current theme in use")

(defun toggle-light-and-dark-theme ()
  ""
  (interactive)
  (if (eq my-current-theme my-dark-theme)
      (custom-set-variables my-current-theme (symbol-value 'my-light-theme))
    (custom-set-variables my-current-theme (symbol-value 'my-dark-theme)))
  (load-theme my-current-theme t nil)
  (customize-save-variable my-current-theme my-current-theme))
#+end_src

keyboard shortcut for toggle
#+begin_src emacs-lisp :tangle no
  (define-key space-map (kbd "t t") 'toggle-light-and-dark-theme)
#+end_src

load current theme from custom variable
#+begin_src emacs-lisp
  ;; (load-theme my-current-theme t nil)
#+end_src

** doom modeline
#+begin_src elisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :custom (doom-modeline-height 15))
#+end_src
** use pywal and spacemaces theme
#+begin_src emacs-lisp
(use-package ewal
  :init (setq ewal-use-built-in-always-p nil
			  ewal-use-built-in-on-failure-p t
			  ewal-built-in-palette "sexy-material"))

(use-package ewal-spacemacs-themes
  :init (progn
		  (setq spacemacs-theme-underline-parens t
				my:rice:font (font-spec
							  :family "Monaco"
							  :weight 'semi-bold
							  :size 11.0))
		  (show-paren-mode +1)
		  (global-hl-line-mode)
		  (set-frame-font my:rice:font nil t)
		  (add-to-list  'default-frame-alist
						`(font . ,(font-xlfd-name my:rice:font))))
  :config (progn
			(load-theme 'ewal-spacemacs-modern t)
			(enable-theme 'ewal-spacemacs-modern)))

(use-package ewal-evil-cursors
  :after (ewal-spacemacs-themes)
  :config (ewal-evil-cursors-get-colors
		   :apply t :spaceline t))

(use-package spaceline
  :after (ewal-evil-cursors winum)
  :init (setq powerline-default-separator nil)
  :config (spaceline-spacemacs-theme))
#+end_src

** company
#+begin_src emacs-lisp
(use-package company
  :ensure t
  :config
  (setq company-backends (quote
						  (company-bbdb
						   company-nxml
						   company-css
						   company-semantic
						   company-cmake
						   company-capf
						   company-dabbrev-code
						   company-gtags
						   company-etags
						   company-keywords
						   company-oddmuse
						   company-files
						   company-dabbrev)))
  (setq completion-on-separator-character t)
  (add-hook 'after-init-hook 'global-company-mode)
  :bind ("<C-tab>" . company-complete))

(use-package company-box :hook (company-mode . company-box-mode)
  :ensure t)
#+end_src

** which-key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config (which-key-mode))
#+end_src

** diff-hl
#+begin_src emacs-lisp
  (use-package diff-hl
    :ensure t
    :config (global-diff-hl-mode))
#+end_src

** swiper/ivy
#+begin_src emacs-lisp
(use-package swiper
  :ensure t)
#+end_src

ivy
#+begin_src emacs-lisp
(use-package ivy
  :config 
  (ivy-mode)
  (setq ivy-use-virtual-buffers t)
  :bind ("C-x b" . ivy-switch-buffer))
#+end_src

#+begin_src emacs-lisp
(use-package counsel
  :bind 
  ("M-x" . counsel-M-x)
  ("C-x C-f" . counsel-find-file))

(use-package counsel-etags)
#+end_src

* htmlize
#+begin_src emacs-lisp
  (use-package htmlize
    :ensure t)
#+end_src

* orgmode
  make orgmode a little more beautiful
#+begin_src emacs-lisp
(defun efs/org-mode-setup ()
  (org-indent-mode)
  (variable-pitch-mode 1)
  (visual-line-mode 1))

(defun efs/org-font-setup ()
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
						  '(("^ *\\([-]\\) "
							 (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "â€¢"))))))

  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 2.0)
				  (org-level-2 . 1.5)
				  (org-level-3 . 1.3)
				  (org-level-4 . 1.2)
				  (org-level-5 . 1.1)
				  (org-level-6 . 1.1)
				  (org-level-7 . 1.1)
				  (org-level-8 . 1.1)))
	(set-face-attribute (car face) nil :foreground 'unspecified :background 'unspecified :font "Helvetica Neue" :weight 'regular :height (cdr face)))

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-block-begin-line nil :background (face-background 'org-block))
  (set-face-attribute 'org-block-end-line nil :background (face-background 'org-block))
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

(use-package org
  :hook ((org-mode . org-indent-mode)
         (org-mode . efs/org-mode-setup))
  :config
  (efs/org-font-setup)
  (setq org-src-fontify-natively t)
  (setq org-hide-emphasis-markers t)
  :ensure org-plus-contrib)
#+end_src

** org-mime
#+begin_src emacs-lisp
  (use-package org-mime 
    :ensure t)
  (setq org-mime-export-options '(:section-numbers nil
								  :with-author nil
								  :with-toc nil))
  (setq org-mime-org-html-with-latex-default 'dvipng)
  (setq org-html-with-latex 'dvipng)

#+end_src

** koma
 #+begin_src emacs-lisp
   (eval-after-load 'ox '(require 'ox-koma-letter))
 #+end_src

** org-reveal
 #+begin_src emacs-lisp
     (use-package ox-reveal
    :ensure t)
 #+end_src

** org-pdfview
 #+begin_src emacs-lisp
     (use-package org-pdftools
    :ensure t)
	   
(add-to-list 'org-file-apps '("\\.pdf::\\([[:digit:]]+\\)\\'" . org-pdfview-open))
 #+end_src

** org-pomodoro
#+begin_src emacs-lisp
  (use-package org-pomodoro
	:ensure t)
#+end_src

** org-ref
#+begin_src emacs-lisp
  (use-package org-ref
  :ensure t
	:bind (:map space-map ("r r" . org-ref-bibtex-hydra/body)))

	(require 'doi-utils)
	(require 'org-ref-pdf)
	(require 'org-ref-url-utils)
	(require 'org-ref-bibtex)
	(require 'org-ref-latex)
	(require 'org-ref-arxiv)
	(require 'org-ref-isbn)
	(require 'org-ref-wos)
	(require 'org-ref-scopus)
	(require 'x2bib)
	(require 'nist-webbook)
	(require 'org-ref-citeproc)
	(require 'unsrt)

	;; see org-ref for use of these variables
	(setq org-ref-default-bibliography '("/mnt/piland/sascha/documents/research/pdfs/bibliography.bib")
		  org-ref-pdf-directory "/mnt/piland/sascha/documents/research/pdfs/")

	(setq bibtex-completion-bibliography "/mnt/piland/sascha/documents/research/pdfs/bibliography.bib"
		  bibtex-completion-library-path "/mnt/piland/sascha/documents/research/pdfs/"
		  bibtex-completion-notes-path "/mnt/piland/sascha/documents/org/")
#+end_src

set custom notes heading format

#+begin_src emacs-lisp
(setq org-ref-note-title-format
"* PREPARE %t
 :PROPERTIES:
  :AUTHOR: %9a
  :JOURNAL: %j
  :YEAR: %y
  :VOLUME: %v
  :PAGES: %p
  :DOI: %D
  :URL: %U
 :END:
")
#+end_src

** org-noter
#+begin_src emacs-lisp
  (use-package org-noter
    :ensure t)
#+end_src

** org-download
#+begin_src emacs-lisp
  (use-package org-download
  :ensure t
	:after org
	:bind (:map space-map (("d s" . org-download-screenshot)
						   ("d y" . org-download-yank))))
#+end_src

** org-roam
#+begin_src emacs-lisp
	;;   (org-roam-directory "~/syncthing/documents/org/")
	;; (setq org-roam-graph-viewer "/Applications/Safari.app/Contens/MacOS/Safari")
(use-package org-roam
  :after org
  :ensure t
  :hook 
  ((after-init . org-roam-mode))
  :bind (:map space-map
			  (("n l" . org-roam)
			   ("n t" . org-roam-dailies-find-today)
			   ("n y" . org-roam-dailies-find-yesterday)
			   ("n d" . org-roam-dailies-find-date)
			   ("n p" . org-roam-dailies-find-previous-note)
			   ("n f" . org-roam-node-find)
			   ("n i" . org-roam-node-insert)
			   ("n g" . org-roam-show-graph))))

(setq org-roam-graph-max-title-length 15)
(setq org-roam-graph-node-shape "box")
(setq org-roam-v2-ack t)

(use-package org-roam-bibtex
  :after org-roam
  :ensure t
  :hook (org-roam-mode . org-roam-bibtex-mode)
  :bind (:map org-mode-map
			  (("C-c n a" . orb-note-actions))))

(use-package org-roam-server
  :disabled t
  :config
  (setq org-roam-server-host "127.0.0.1"
        org-roam-server-port 8080
        org-roam-server-export-inline-images t
        org-roam-server-authenticate nil
        org-roam-server-label-truncate t
        org-roam-server-label-truncate-length 60
        org-roam-server-label-wrap-length 20))

(setq orb-preformat-keywords
      '(("citekey" . "=key=") "title" "url" "file" "author-or-editor" "keywords" "year" "volume" "doi" "journal" "pages"))

(setq orb-templates
	  '(("r" "ref" plain (function org-roam-capture--get-point) 
		 ""
		 :file-name "${citekey}"
		 :head "#+TITLE: ${citekey}: ${title}\n#+ROAM_KEY: ${ref}\n${ref}

	  - tags ::
	  - keywords :: ${keywords}

	  ,* ${title}
	  :PROPERTIES:
	  :Custom_ID: ${citekey}
	  :URL: ${url}
	  :AUTHOR: ${author-or-editor}
	  :JOURNAL: ${journal}
	  :YEAR: ${year} 
	  :VOLUME: ${volume} 
	  :PAGES: ${pages}
	  :DOI: ${doi}
	  :URL: ${url}
	  :NOTER_DOCUMENT: %(orb-process-file-field \"${citekey}\")
	  :END:" 
		 :unnarrowed t)))
#+end_src

** org-appear
This shows markup elemenst when the cursor is on them
#+begin_src emacs-lisp
(use-package org-appear
  :ensure t
  :hook (org-mode . org-appear-mode))
#+end_src

** org-presenter
#+begin_src emacs-lisp
(defun dw/org-present-prepare-slide ()
  (org-overview)
  (org-show-entry)
  (org-show-children))

(defun dw/org-present-hook ()
  (setq-local face-remapping-alist '((default (:height 1.5) variable-pitch)
									 (header-line (:height 4.5) variable-pitch)
									 (org-document-title (:height 1.75) org-document-title)
									 (org-code (:height 1.55) org-code)
									 (org-verbatim (:height 1.55) org-verbatim)
									 (org-block (:height 1.25) org-block)
									 (org-block-begin-line (:height 0.7) org-block)))
  (setq header-line-format " ")
  (org-appear-mode -1)
  (org-display-inline-images)
  (dw/org-present-prepare-slide))

(defun dw/org-present-quit-hook ()
  (setq-local face-remapping-alist '((default variable-pitch default)))
  (setq header-line-format nil)
  (org-present-small)
  (org-remove-inline-images)
  (org-appear-mode 1))

(defun dw/org-present-prev ()
  (interactive)
  (org-present-prev)
  (dw/org-present-prepare-slide))

(defun dw/org-present-next ()
  (interactive)
  (org-present-next)
  (dw/org-present-prepare-slide))

(use-package org-present
  :ensure t
  :bind (:map org-present-mode-keymap
			  ("C-c C-j" . dw/org-present-next)
			  ("C-c C-k" . dw/org-present-prev))
  :hook ((org-present-mode . dw/org-present-hook)
		 (org-present-mode-quit . dw/org-present-quit-hook)))
#+end_src
#+begin_src emacs-lisp
(use-package org-superstar
  :ensure t
  :after org
  :custom (org-superstar-remove-leading-stars t)
  :hook (org-mode . org-superstar-mode))
#+end_src

** org-visualstar
** helm-org
#+begin_src emacs-lisp
  (use-package helm-org :ensure t)
#+end_src

** capture
#+begin_src emacs-lisp
(define-key space-map (kbd "c c") 'org-capture)
#+end_src

*** capture templates

Function to insert paper bibliography entry and org-ref link
#+begin_src emacs-lisp
  (defun org-capture-insert-orgref-link ()
	""
	(interactive)
	(helm-bibtex nil nil (substring-no-properties (car kill-ring)))
	(org-set-property))

  (define-key space-map (kbd "c t") 'org-capture-insert-orgref-link)
#+end_src

#+begin_src emacs-lisp
  (setq org-capture-templates 
			   '(("p" "Paper" entry (file "/mnt/piland/sascha/documents/research/papers.org") "* PREPARE %x\n  :PROPERTIES:\n  :Source:\n  :End:")))
#+end_src
** agenda
#+begin_src emacs-lisp
  (setq org-agenda-custom-commands
		'(("p" . "Papers search")
		  ("pa" tags "+paper-notes")
		  ("pd" tags "+paper+wave_optics+diffraction-notes")))
#+end_src

** export
#+begin_src emacs-lisp
  (setq org-latex-prefer-user-labels t)
  (setq org-latex-pdf-process
        (quote
         ("pdflatex -interaction nonstopmode -output-directory %o %f" 
           "biber %b" 
           "pdflatex -interaction nonstopmode -output-directory %o %f" 
           "pdflatex -interaction nonstopmode -output-directory %o %f")))

  (require 'ox-latex)
  (add-to-list
   'org-latex-classes
   '("dinbrief"
     "\\documentclass[12pt]{dinbrief}
  \[DEFAULT-PACKAGES]
  \[PACKAGES]
  \[EXTRA]"))
#+end_src

*** ICG Tu bs latex documentclass
#+begin_src emacs-lisp
  (add-to-list
   'org-latex-classes
   '("cg"
     "\\documentclass{cg}"
     ("\\chapter\{%s\}" . "\\chapter*\{%s\}")
     ("\\section\{%s\}" . "\\section*\{%s\}")
     ("\\subsection\{%s\}" . "\\subsection*\{%s\}")
     ("\\subsubsection\{%s\}" . "\\subsubsection*\{%s\}")))
#+end_src

** caldav
#+begin_src emacs-lisp
  (use-package org-caldav
  :ensure t
    :config
    (setq org-caldav-url "https://cal.frotticloud.ydns.eu:22123/frigge")
    (setq org-caldav-calendar-id "4780be13-a759-7f2b-21d9-c6df543aa5d7")
    (setq org-caldav-inbox "~/my_agenda/caldav.org")
    (setq org-caldav-files '("/mnt/piland/sascha/documents/todo.org")))
#+end_src

** misc
make latex fragments a little bigger
#+begin_src emacs-lisp
(plist-put org-format-latex-options :scale 1.5)
#+end_src

** babel
*** languages
#+begin_src emacs-lisp
(require 'ob-C)
(require 'ob-gnuplot)
(require 'ob-shell)
(setq org-babel-load-languages '((python . t)
								 (emacs-lisp . t)
								 (latex . t)
								 (shell . t)
								 (sh . t)
								 (ipython . t)
								 (gnuplot . t)
								 (C . t)
								 (cpp . t)
								 (org . t)))

(setq org-src-preserve-indentation t)
(setq org-latex-listings t)
(add-to-list 'org-latex-packages-alist '("" "listings"))
(add-to-list 'org-latex-packages-alist '("" "color"))
#+end_src

*** IPython support
#+begin_src emacs-lisp
  (use-package ob-ipython
:ensure t)
#+end_src

* gnuplot
#+begin_src emacs-lisp
  (use-package gnuplot
	:ensure t)
#+end_src

* email
** mu4e
#+begin_src emacs-lisp
  (add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu/mu4e")
(require 'mu4e)
(custom-set-variables
 '(mu4e-attachment-dir "~/Downloads")
 '(mu4e-compose-signature-auto-include t)
 '(mu4e-drafts-folder "/drafts")
 '(mu4e-get-mail-command "mbsync -a")
 '(mu4e-maildir "~/.mail")
 '(mu4e-refile-dir "/archive")
 '(mu4e-sent-folder "/sent")
 '(mu4e-trash-folder "/trash")
 '(mu4e-update-interval 300)
 '(mu4e-use-fancy-chars t)
 '(mu4e-view-show-address t)
 '(org-mu4e-convert-to-html t)
 '(mu4e-view-show-images t))
(add-to-list 'mu4e-view-actions '("ViewInBrowser" . mu4e-action-view-in-browser) t)

(add-to-list 'mu4e-bookmarks
			 (make-mu4e-bookmark
			  :name "PhoenixD"
			  :query "subject:phoenixd OR from:phoenixd"
			  :key ?h))
(require 'org-mu4e)
(defalias 'org-mail 'org-mu4e-compose-org-mode)

(add-hook 'mu4e-compose-post-hook
		  (defun do-compose-stuff ()
			"My settings for message composition."
			(org-mu4e-compose-org-mode)))

(defun htmlize-and-send ()
  "When in an org-mu4e-compose-org-mode message, htmlize and send it."
  (interactive)
  (when (member 'org~mu4e-mime-switch-headers-or-body post-command-hook)
	(org-mime-htmlize)
	(org-mu4e-compose-org-mode)
	(mu4e-compose-mode)
	(message-send-and-exit)))

(defun set-tubs-smtp ()
  (setq send-mail-function (quote smtpmail-send-it))
  (setq smtpmail-smtp-server "groupware.tu-bs.de")
  (setq smtpmail-smtp-user "sasfrick")
  (setq smtpmail-smtp-service 465)
  (setq smtpmail-stream-type 'ssl)
  (setq user-full-name "Sascha Fricke")
  (setq user-mail-address "s.fricke@tu-bs.de"))

(defun set-icg-smtp ()
  (setq send-mail-function (quote smtpmail-send-it))
  (setq smtpmail-smtp-server "europa.cg.cs.tu-bs.de")
  (setq smtpmail-smtp-user "fricke")
  (setq smtpmail-smtp-service 587)
  (setq smtpmail-stream-type 'starttls)
  (setq user-full-name "Sascha Fricke")
  (setq user-mail-address "fricke@cg.cs.tu-bs.de"))

(defun set-gmail-smtp ()
  (setq send-mail-function (quote smtpmail-send-it))
  (setq smtpmail-smtp-server "smtp.gmail.com")
  (setq smtpmail-smtp-service 465)
  (setq smtpmail-stream-type 'ssl)
  (setq user-full-name "Sascha Fricke")
  (setq user-mail-address "sascha.frigge@gmail.com"))
;; (set-tubs-smtp)
(set-icg-smtp)
;; (set-gmail-smtp)

(setq mu4e-contexts
	      `(,(make-mu4e-context
		 :name "ICG"
		 :enter-func (lambda () (mu4e-message "Entering ICG context"))
		 :leave-func (lambda () (mu4e-message "Leaving ICG context"))
		 :vars '((user-mail-address . "fricke@cg.cs.tu-bs.de" )
				 (user-full-name . "Sascha Fricke")
				 (smtpmail-smtp-server . "europa.cg.cs.tu-bs.de")
				 (smtpmail-smtp-user . "fricke")
				 (smtpmail-smtp-service . 465)
				 (smtpmail-stream-type . ssl)
				 )),
		(make-mu4e-context
		 :name "TUBS"
		 :enter-func (lambda () (mu4e-message "Entering TUBS context"))
		 :leave-func (lambda () (mu4e-message "Leaving TUBS context"))
		 :vars '((user-mail-address . "s.fricke@tu-bs.de" )
				 (user-full-name . "Sascha Fricke")
				 (smtpmail-smtp-server . "groupware.tu-bs.de")
				 (smtpmail-smtp-user . "sasfrick")
				 (smtpmail-smtp-service . 465)
				 (smtpmail-stream-type . ssl)
				 ))))

#+end_src

*** mu4e-views (xwidget-webkit support)
#+begin_src emacs-lisp
(use-package mu4e-views
  :straight (mu4e-views :type git :host github :repo "lordpretzel/mu4e-views"))
#+end_src

* mu4e-alert
#+begin_src emacs-lisp
  (use-package mu4e-alert
  :ensure t
  :hook ((after-init . mu4e-alert-enable-mode-line-display))
	:config (mu4e-alert-set-default-style 'libnotify)
			 (mu4e-alert-enable-notifications))
#+end_src

* projectile
#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :config (setq projectile-mode t)
  (define-key space-map (kbd "p") 'projectile-command-map)
  (setq projectile-tags-command "ctags -Re -f '%s' --fields=+iaSt --extra=+q --exclude='.git' %s"))
#+end_src

** org-projectile
#+begin_src emacs-lisp
  (use-package org-projectile
  :ensure t
	:bind (:map space-map ("c p" . org-projectile-project-todo-completing-read))
	:config (progn (org-projectile-per-project)
				   (setq org-projectile-per-repo-filepath "project_todo.org")
				   (setq org-agenda-files (append org-agenda-files (org-projectile-todo-files)))))
#+end_src

* ag
#+begin_src emacs-lisp
(use-package ag
  :ensure t
  :config (setq ag-group-matches nil))
#+end_src

* wgrep
#+begin_src emacs-lisp
  (use-package wgrep :ensure t)
  (use-package wgrep-ag :ensure t)
#+end_src

* calfw
#+begin_src emacs-lisp
  (straight-use-package '(emacs-calfw :type git :host github :repo "zemaye/emacs-calfw"))
  (require 'calfw)
  (require 'calfw-org)
  (setq cfw:org-overwrite-default-keybinding t)
#+end_src

* ctags
#+begin_src emacs-lisp
  (setq ctags-update-command "/usr/bin/ctags")
  (setq ctags-update-delay-seconds 10)
  (setq ctags-update-other-options
		(quote
		 ("--fields=+iaSt"
		  "--extra=+q"
		  "--exclude='*.elc'"
		  "--exclude='*.class'"
		  "--exclude='.git'"
		  "--exclude='.svn'"
		  "--exclude='SCCS'"
		  "--exclude='RCS'"
		  "--exclude='CVS'"
		  "--exclude='EIFGEN'"
		  "-R"
		  "-e")))
#+end_src

* flycheck
#+begin_src emacs-lisp
  (use-package flycheck
	:ensure t
	:config (global-flycheck-mode))
#+end_src

* magit
#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :defer t)
#+end_src 

* smerge
#+begin_src emacs-lisp
  (require 'smerge-mode)
  (define-key space-map (kbd "s s") 'smerge-mode)

  (defun my-smerge-bindings ()
    (define-key space-map (kbd "s RET") 'smerge-keep-current)
    (define-key space-map (kbd "s d m") 'smerge-diff-base-mine)
    (define-key space-map (kbd "s d o") 'smerge-diff-base-other)
    (define-key space-map (kbd "s d b") 'smerge-diff-mine-other)

    (define-key space-map (kbd "s C") 'smerge-combine-with-next)
    (define-key space-map (kbd "s E") 'smerge-ediff)
    (define-key space-map (kbd "s R") 'smerge-refine)
    (define-key space-map (kbd "s a") 'smerge-keep-all)
    (define-key space-map (kbd "s b") 'smerge-keep-base)
    (define-key space-map (kbd "s m") 'smerge-keep-mine)
    (define-key space-map (kbd "s n") 'smerge-next)
    (define-key space-map (kbd "s o") 'smerge-keep-other)
    (define-key space-map (kbd "s p") 'smerge-prev)
    (define-key space-map (kbd "s r") 'smerge-resolve))

  (add-hook 'smerge-mode-hook 'my-smerge-bindings)
#+end_src 

* extra file type modes
  
** cuda-mode
dont use cuda-mode for now as it doesnt work with smart-indent

#+begin_src emacs-lisp
(use-package cuda-mode
  :disabled t)
#+end_src

just load c++ mode for cuda files
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.cu\\'" . c++-mode))
  (add-to-list 'auto-mode-alist '("\\.cuh\\'" . c++-mode))
#+end_src

** opencl-mode
#+begin_src emacs-lisp
(use-package opencl-mode
  :disabled t)
#+end_src

** glsl-mode
#+begin_src emacs-lisp
(use-package glsl-mode
  :ensure t)

(add-to-list 'auto-mode-alist '("\\.comp\\'" . glsl-mode))
(add-to-list 'auto-mode-alist '("\\.rgen\\'" . glsl-mode))
(add-to-list 'auto-mode-alist '("\\.rchit\\'" . glsl-mode))
(add-to-list 'auto-mode-alist '("\\.rahit\\'" . glsl-mode))
(add-to-list 'auto-mode-alist '("\\.rmiss\\'" . glsl-mode))

#+end_src

** conf-mode for mtstudio files
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.rg\\'" . conf-mode))
  (add-to-list 'auto-mode-alist '("\\.prj\\'" . conf-mode))

#+end_src

* lsp-mode

#+begin_src emacs-lisp
(use-package lsp-mode
  :hook (c++-mode . lsp) (c-mode . lsp) (pyhton-mode . lsp)
  :ensure t)
(use-package lsp-ui :commands lsp-ui-mode
  :disabled t
  :ensure t)
(use-package company-lsp :commands company-lsp
  :ensure t)
(use-package helm-lsp :commands helm-lsp-workspace-symbol
  :ensure t)
#+end_src

** dap-mode
#+begin_src emacs-lisp
  (use-package dap-mode :disabled t)
  ;; (require 'dap-gdb-lldb)
  ;; (require 'dap-python)
  ;; (require 'dap-launch)
#+end_src

* c++
** semantic-refactor
#+begin_src emacs-lisp
  (use-package srefactor
	:disabled t)

  ;; (require 'srefactor)
  ;; (require 'srefactor-lisp)
  ;; (semantic-mode 1)
  ;; (define-key space-map (kbd "SPC R") 'srefactor-refactor-at-point)
  ;; (define-key space-map (kbd "SPC R") 'srefactor-refactor-at-point)
#+end_src

** C Style Formatting
#+begin_src emacs-lisp
	  (setq indent-tabs-mode nil)

	  (defconst my-cc-style
		'("user"
		  (c-basic-offset . 4)
		  (c-offsets-alist
		   (innamespace . 0))))
	  (c-add-style "my-cc-style" my-cc-style)

	  (setq c-default-style
			(quote
			 ((java-mode . "java")
			  (awk-mode . "awk")
			  (python-mode . "python")
			  (cc-mode . "my-cc-style")
			  (other . "user"))))
	  (setq-default tab-width 4)
	  (setq-default default-tab-width 4)
#+end_src
** cmake-mode
#+begin_src emacs-lisp
(use-package cmake-mode
  :ensure t)
#+end_src

** cmake-ide
#+begin_src emacs-lisp
(use-package cmake-ide
  :config (cmake-ide-setup)
  :disabled t)
#+end_src

*set cmake-build-dir to current dir* 

small helper function to quickly set the build dir for cmake-ide to
the current directory from eshell.

#+begin_src emacs-lisp
  ;; (defun set-cmake-ide-build-dir () 
  ;;   "sets cmake-build-dir variable to default-directory
  ;;   intended to be called from eshell to quickly set the cmake build directory"
  ;;   (setq cmake-build-dir default-directory))
#+end_src

** clang-format
#+begin_src emacs-lisp
(use-package clang-format
  :ensure t
  :config (define-key evil-normal-state-map (kbd "SPC c f") 'clang-format-region))
#+end_src

* tabify/untabify shortcuts
#+begin_src emacs-lisp
  (define-key space-map (kbd "t t") 'tabify)
  (define-key space-map (kbd "t u") 'untabify)
#+end_src

* Python
#+begin_src emacs-lisp
  (setq python-shell-interpreter "ipython3")
  (setq python-shell-interpreter-args "--simple-prompt -i")
  (push "ipython3" python-shell-completion-native-disabled-interpreters)
#+end_src

** Jupyter / IPython notebooks
#+begin_src emacs-lisp
  (use-package ein :ensure t)
#+end_src

#+RESULTS:

* Debugging
** GDB
 #+begin_src emacs-lisp
   (setq gdb-dispaly-io-nopopup t)
 #+end_src
** gdb-mi
 #+begin_src emacs-lisp
(use-package gdb-mi
  :straight (:host github :repo "weirdNox/emacs-gdb" :files ("*.el" "*.c" "*.h" "Makefile"))
  :disabled t
  :init
  (fmakunbound 'gdb)
  (fmakunbound 'gdb-enable-debug))
#+end_src

** realgud
 #+begin_src emacs-lisp
   ;; (use-package realgud)
 #+end_src
 
* pdftools
#+begin_src emacs-lisp
(use-package pdf-tools
  :ensure t
  :config (pdf-tools-install))

#+end_src

* Paperless
#+begin_src emacs-lisp
	(use-package paperless
	:disabled t
	  :config (custom-set-variables '(paperless-capture-directory "~/Documents/capture")
									'(paperless-root-directory "/mnt/piland/sascha/documents/paperless")))
			
  ;; (require 'org-paperless)

#+end_src

* default browser
#+begin_src emacs-lisp
  (setq browse-url-generic-program "vivaldi-stable")
  (setq browse-url-browser-function 'browse-url-generic)
#+end_src

* latex
** auctex
#+begin_src emacs-lisp
(use-package tex :ensure auctex)
(setq TeX-view-program-selection '((output-pdf "PDF Tools"))
      TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
      TeX-source-correlate-start-server t)
(add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
#+end_src

** biblatex
   set default bibtex dialect
#+begin_src emacs-lisp
  (setq bibtex-dialect 'biblatex)
#+end_src

gscholar references  (as alternative to org-ref)
#+begin_src emacs-lisp
  (use-package gscholar-bibtex
	:ensure t
	:bind (:map space-map ("r g" . gscholar-bibtex))
	:config (setq gscholar-bibtex-database-file
				   "/mnt/piland/sascha/documents/research/pdfs/bibliography.bib")
			 (setq gscholar-bibtex-default-source "Google Scholar"))
#+end_src

** reftex default bibliography
   
#+begin_src emacs-lisp
(setq reftex-default-bibliography '("/mnt/piland/sascha/documents/research/bibliography.bib"))
#+end_src

* start emacs server
#+begin_src emacs-lisp
(server-start)
#+end_src
