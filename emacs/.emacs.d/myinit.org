* misc
   Add ~/.emacs.d to load path
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/modules/")
#+end_src

** start in eshell

 #+begin_src emacs-lisp
   (eshell)
 #+end_src

** single window with i3
 #+begin_src emacs-lisp
   (setq pop-up-frames 'graphic-only)
 #+end_src

** bookmarks
## #+begin_src emacs-lisp
##   (define-key space-map (kbd "b") 'helm-filtered-bookmarks)
## #+end_src

** CSV mode
 #+begin_src emacs-lisp
 (use-package csv-mode)
 #+end_src
** Use gtklp as Printer
#+begin_src emacs-lisp
(setq lpr-command "gtklp")
(setq ps-lpr-command "gtklp")
#+end_src

** create compilation buffer with custom name
#+begin_src emacs-lisp
  (defun compile-and-rename (cmd name) ""
		 (if (get-buffer name)
			 (progn (set-buffer name)
					(recompile))
		   (progn (compile cmd)
				  (set-buffer "*compilation*")
				  (rename-buffer name))))
#+end_src

* yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
	:config (yas-global-mode 1))

  (use-package yasnippet-snippets)
#+end_src
* helm
#+begin_src emacs-lisp
      (use-package helm)
#+end_src
* evil
#+begin_src emacs-lisp
  (use-package evil
    :config (evil-mode t))

  (use-package evil-org)

  (use-package evil-numbers
    :bind (:map evil-normal-state-map
                 ("+" . evil-numbers/inc-at-pt)
                 ("-" . evil-numbers/dec-at-pt)
           :map evil-visual-state-map
                 ("+" . evil-numbers/inc-at-pt)
                 ("-" . evil-numbers/dec-at-pt)))

  (use-package evil-quickscope
    :config (global-evil-quickscope-mode t))

  (use-package evil-surround
    :config (global-evil-surround-mode 1))


  (use-package evil-visualstar
    :config (global-evil-visualstar-mode t))

  (use-package evil-commentary
    :config (evil-commentary-mode t))

  (use-package evil-string-inflection)
#+end_src

** don't use SPC and RET as motion keys in normal mode
#+begin_src emacs-lisp
  (defun my-move-key (keymap-from keymap-to key)
    "Moves key binding from one keymap to another, deleting from the old location. "
    (define-key keymap-to key (lookup-key keymap-from key))
    (define-key keymap-from key nil))
  (my-move-key evil-motion-state-map evil-normal-state-map (kbd "RET"))
  (my-move-key evil-motion-state-map evil-normal-state-map " ")
#+end_src
  
** SPC as leader key in evil normal mode

#+begin_src emacs-lisp
  (define-prefix-command 'space-map)
  (define-key evil-normal-state-map (kbd "SPC") 'space-map)
  (define-key evil-motion-state-map (kbd "SPC") 'space-map)
  (define-key space-map (kbd "x") 'counsel-M-x)
  ;; (define-key space-map (kbd "b") 'ivy-switch-buffer)
  (define-key space-map (kbd "f") 'counsel-find-file)
  (define-key space-map (kbd "o") 'ace-window)
  (define-key space-map (kbd "0") 'delete-window)
  (define-key space-map (kbd "1") 'delete-other-windows)
  (define-key space-map (kbd "2") 'split-window-below)
  (define-key space-map (kbd "3") 'split-window-right)
  (define-key space-map (kbd "/") 'swiper)
#+end_src

* gui
** misc
#+begin_src emacs-lisp
  (setq blink-cursor-mode nil)
  (setq inhibit-startup-screen t)
  (setq line-number-mode t)
  (scroll-bar-mode -1)
  (show-paren-mode)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (setq global-hl-line-mode t)
  (setq global-auto-revert-mode t)
  (setq global-visual-line-mode t)

  (global-set-key (kbd "<f4>") 'ff-find-other-file)
  ;; (recentf-mode)
#+end_src

*** rainbow mode
#+begin_src emacs-lisp
  (use-package rainbow-mode
	:bind (:map space-map ("h h" . rainbow-mode)))
#+end_src
*** display inline images
#+begin_src emacs-lisp
  (auto-image-file-mode)
#+end_src

*** indent tabs
#+begin_src emacs-lisp
  (use-package smart-tabs-mode)
  (add-hook 'c-mode-common-hook (lambda () (setq indent-tabs-mode t)))
  ;; (smart-tabs-insinuate 'c 'c++)
  ;; (setq smart-tabs-mode t)
#+end_src

whitespace mode toggle
#+begin_src emacs-lisp
  (define-key space-map (kbd "w w") 'whitespace-mode)
#+end_src

*** beacon-mode
#+begin_src emacs-lisp
  (use-package beacon
               :config (beacon-mode))
#+end_src

** ido
#+begin_src emacs-lisp
  (use-package ido
	:config (ido-mode)
	:disabled t)

	;; (global-set-key (kbd "C-x C-f") 'ido-find-file)
	;; (global-set-key (kbd "C-x b") 'ido-switch-buffer)
#+end_src

** ace-window
#+begin_src emacs-lisp
	(use-package ace-window
	  :bind ("C-x o" . ace-window)
	  :config (setq ace-window-display-mode t)
	  (setq aw-scope 'frame))
#+end_src

** font
#+begin_src emacs-lisp
(custom-set-faces
 '(default ((t (:height 98 :foundry "DAMA" :family "Consolas for Powerline")))))
#+end_src

** theme
#+begin_src emacs-lisp
(use-package xresources-theme)
    :
#+end_src

#+RESULTS:
: t

Toggle light and dark theme. Light and dark theme can be customized by setting ~my-dark-theme~ and ~my-light-theme~.

#+begin_src emacs-lisp :tangle no
  (defcustom my-dark-theme 'solarized-dark "current dark theme")
  (defcustom my-light-theme 'solarized-light "current light theme")
  (defcustom my-current-theme (symbol-value 'my-dark-theme) "current theme in use")

  (defun toggle-light-and-dark-theme ()
    ""
    (interactive)
    (if (eq my-current-theme my-dark-theme)
        (custom-set-variables my-current-theme (symbol-value 'my-light-theme))
      (custom-set-variables my-current-theme (symbol-value 'my-dark-theme)))
    (load-theme my-current-theme t nil)
    (customize-save-variable my-current-theme my-current-theme))
#+end_src

keyboard shortcut for toggle
#+begin_src emacs-lisp :tangle no
  (define-key space-map (kbd "t t") 'toggle-light-and-dark-theme)
#+end_src

load current theme from custom variable
#+begin_src emacs-lisp :tangle no
  (load-theme my-current-theme t nil)
#+end_src

** company
#+begin_src emacs-lisp
  (use-package company
	:config
	(setq company-backends (quote
							(company-bbdb
							 company-nxml
							 company-css
							 company-semantic
							 company-cmake
							 company-capf
							 company-dabbrev-code
							 company-gtags
							 company-etags
							 company-keywords
							 company-oddmuse
							 company-files
							 company-dabbrev)))
	(setq completion-on-separator-character t)
	(add-hook 'after-init-hook 'global-company-mode)
	:bind ("<C-tab>" . company-complete))

  (use-package company-box :hook (company-mode . company-box-mode))
#+end_src

** which-key
#+begin_src emacs-lisp
  (use-package which-key
    :config (which-key-mode))
#+end_src

** git-gutter
#+begin_src emacs-lisp
  (use-package git-gutter
    :config (global-git-gutter-mode))
#+end_src

** swiper/ivy
#+begin_src emacs-lisp
  (use-package swiper
:disabled t)
#+end_src

ivy
#+begin_src emacs-lisp
      (use-package ivy
	  :disabled t
        :config 
        (ivy-mode)
        (setq ivy-use-virtual-buffers t)
        :bind ("C-x b" . ivy-switch-buffer)
:disabled t)
#+end_src

#+begin_src emacs-lisp
  (use-package counsel
  :disabled t
	:bind 
	("M-x" . counsel-M-x)
	("C-x C-f" . counsel-find-file))

  (use-package counsel-etags
  :disabled t)
#+end_src

* htmlize
#+begin_src emacs-lisp
  (use-package htmlize)
#+end_src

* orgmode
#+begin_src emacs-lisp
  (use-package org
	:ensure org-plus-contrib)
#+end_src

** org-mime
#+begin_src emacs-lisp
  (use-package org-mime :ensure t)
  (setq org-mime-export-options '(:section-numbers nil
								  :with-author nil
								  :with-toc nil))
  (setq org-mime-org-html-with-latex-default 'dvipng)
  (setq org-html-with-latex 'dvipng)

#+end_src
** koma
 #+begin_src emacs-lisp
   (eval-after-load 'ox '(require 'ox-koma-letter))
 #+end_src

** org-reveal
 #+begin_src emacs-lisp
     (use-package ox-reveal)
 #+end_src

** org-pdfview
 #+begin_src emacs-lisp
     (use-package org-pdfview)
	   
(add-to-list 'org-file-apps '("\\.pdf::\\([[:digit:]]+\\)\\'" . org-pdfview-open))
 #+end_src

** org-pomodoro
#+begin_src emacs-lisp
  (use-package org-pomodoro
	:disabled t
    :bind (:map space-map ("o p" . org-pomodoro)))
#+end_src

** org-ref
#+begin_src emacs-lisp
  (use-package org-ref
	:bind (:map space-map ("r r" . org-ref-bibtex-hydra/body)))

	(require 'doi-utils)
	(require 'org-ref-pdf)
	(require 'org-ref-url-utils)
	(require 'org-ref-bibtex)
	(require 'org-ref-latex)
	(require 'org-ref-arxiv)
	(require 'org-ref-isbn)
	(require 'org-ref-wos)
	(require 'org-ref-scopus)
	(require 'x2bib)
	(require 'nist-webbook)
	(require 'org-ref-citeproc)
	(require 'unsrt)

	;; see org-ref for use of these variables
	(setq org-ref-default-bibliography '("/mnt/piland/sascha/documents/research/bib.bib")
		  org-ref-pdf-directory "/mnt/piland/sascha/documents/research/pdfs/")

	(setq bibtex-completion-bibliography "/mnt/piland/sascha/documents/research/bib.bib"
		  bibtex-completion-library-path "/mnt/piland/sascha/documents/research/pdfs/"
		  bibtex-completion-notes-path "/mnt/piland/sascha/documents/org/")
#+end_src

set custom notes heading format

#+begin_src emacs-lisp
(setq org-ref-note-title-format
"* PREPARE %t
 :PROPERTIES:
  :AUTHOR: %9a
  :JOURNAL: %j
  :YEAR: %y
  :VOLUME: %v
  :PAGES: %p
  :DOI: %D
  :URL: %U
 :END:
")
#+end_src

** org-noter
#+begin_src emacs-lisp
  (use-package org-noter)
#+end_src

** org-download
#+begin_src emacs-lisp
  (use-package org-download
	:after org
	:bind (:map space-map (("d s" . org-download-screenshot)
						   ("d y" . org-download-yank))))
#+end_src

** org-roam
#+begin_src emacs-lisp
  (use-package org-roam
	:after org
	:ensure t
	:hook 
	((after-init . org-roam-mode))
	:custom
	(org-roam-directory "/mnt/piland/sascha/documents/org/")
	:bind (:map space-map
				(("n l" . org-roam)
				 ("n t" . org-roam-today)
				 ("n f" . org-roam-find-file)
				 ("n i" . org-roam-insert)
				 ("n g" . org-roam-show-graph))))

  (setq org-roam-graph-viewer "/usr/bin/vivaldi-stable")
  (setq org-roam-graph-max-title-length 15)
  (setq org-roam-graph-node-shape "box")

  (use-package org-roam-bibtex
	:after org-roam
	:ensure t
	:hook (org-roam-mode . org-roam-bibtex-mode)
	:bind (:map org-mode-map
				(("C-c n a" . orb-note-actions))))

  (use-package org-roam-server
	:ensure t
	:config
	(setq org-roam-server-host "127.0.0.1"
		  org-roam-server-port 8080
		  org-roam-server-export-inline-images t
		  org-roam-server-authenticate nil
		  org-roam-server-label-truncate t
		  org-roam-server-label-truncate-length 60
		  org-roam-server-label-wrap-length 20))

  (setq orb-preformat-keywords
		'(("citekey" . "=key=") "title" "url" "file" "author-or-editor" "keywords" "year" "volume" "doi" "journal" "pages"))

  (setq orb-templates
		'(("r" "ref" plain (function org-roam-capture--get-point) 
		   ""
		   :file-name "${citekey}"
		   :head "#+TITLE: ${citekey}: ${title}\n#+ROAM_KEY: ${ref}

	- tags ::
	- keywords :: ${keywords}

	,* ${title}
	:PROPERTIES:
	:Custom_ID: ${citekey}
	:URL: ${url}
	:AUTHOR: ${author-or-editor}
	:JOURNAL: ${journal}
	:YEAR: ${year} 
	:VOLUME: ${volume} 
	:PAGES: ${pages}
	:DOI: ${doi}
	:URL: ${url}
	:NOTER_DOCUMENT: %(orb-process-file-field \"${citekey}\")
	:END:" 
		   :unnarrowed t)))
#+end_src

** helm-org
#+begin_src emacs-lisp
  (use-package helm-org :ensure t)
#+end_src
** capture
#+begin_src emacs-lisp
(define-key space-map (kbd "c c") 'org-capture)
#+end_src

*** capture templates

Function to insert paper bibliography entry and org-ref link
#+begin_src emacs-lisp
  (defun org-capture-insert-orgref-link ()
	""
	(interactive)
	(helm-bibtex nil nil (substring-no-properties (car kill-ring)))
	(org-set-property))

  (define-key space-map (kbd "c t") 'org-capture-insert-orgref-link)
#+end_src

#+begin_src emacs-lisp
  (setq org-capture-templates 
			   '(("p" "Paper" entry (file "/mnt/piland/sascha/documents/research/papers.org") "* PREPARE %x\n  :PROPERTIES:\n  :Source:\n  :End:")))
#+end_src
** agenda
#+begin_src emacs-lisp
  (setq org-agenda-custom-commands
		'(("p" . "Papers search")
		  ("pa" tags "+paper-notes")
		  ("pd" tags "+paper+wave_optics+diffraction-notes")))
#+end_src

** export
#+begin_src emacs-lisp
  (setq org-latex-prefer-user-labels t)
  (setq org-latex-pdf-process
        (quote
         ("pdflatex -interaction nonstopmode -output-directory %o %f" 
           "biber %b" 
           "pdflatex -interaction nonstopmode -output-directory %o %f" 
           "pdflatex -interaction nonstopmode -output-directory %o %f")))
  (setq org-src-fontify-natively t)

  (require 'ox-latex)
  (add-to-list
   'org-latex-classes
   '("dinbrief"
     "\\documentclass[12pt]{dinbrief}
  \[DEFAULT-PACKAGES]
  \[PACKAGES]
  \[EXTRA]"))
#+end_src

*** ICG Tu bs latex documentclass
#+begin_src emacs-lisp
  (add-to-list
   'org-latex-classes
   '("cg"
     "\\documentclass{cg}"
     ("\\chapter\{%s\}" . "\\chapter*\{%s\}")
     ("\\section\{%s\}" . "\\section*\{%s\}")
     ("\\subsection\{%s\}" . "\\subsection*\{%s\}")
     ("\\subsubsection\{%s\}" . "\\subsubsection*\{%s\}")))
#+end_src

** caldav
#+begin_src emacs-lisp
  (use-package org-caldav
    :config
    (setq org-caldav-url "https://cal.frotticloud.ydns.eu:22123/frigge")
    (setq org-caldav-calendar-id "4780be13-a759-7f2b-21d9-c6df543aa5d7")
    (setq org-caldav-inbox "~/my_agenda/caldav.org")
    (setq org-caldav-files '("/mnt/piland/sascha/documents/todo.org")))
#+end_src

** misc
make latex fragments a little bigger
#+begin_src emacs-lisp
(plist-put org-format-latex-options :scale 1.5)
#+end_src

** babel
*** languages
#+begin_src emacs-lisp
  (require 'ob-C)
  (require 'ob-gnuplot)
  (setq org-babel-load-languages '((python . t)
								   (emacs-lisp . t)
								   (latex . t)
								   (ipython . t)
								   (gnuplot . t)
								   (C . t)
								   (cpp . t)
								   (org . t)))

  (setq org-latex-listings t)
  (add-to-list 'org-latex-packages-alist '("" "listings"))
  (add-to-list 'org-latex-packages-alist '("" "color"))
#+end_src

*** IPython support
#+begin_src emacs-lisp
  (use-package ob-ipython)
#+end_src

* gnuplot
#+begin_src emacs-lisp
  (use-package gnuplot
	:ensure t)
#+end_src

* email
#+begin_src emacs-lisp
	  (defun set-tubs-smtp ()
		(setq send-mail-function (quote smtpmail-send-it))
		(setq smtpmail-smtp-server "groupware.tu-braunschweig.de")
		(setq smtpmail-smtp-service 465)
		(setq smtpmail-stream-type 'ssl)
		(setq user-full-name "Sascha Fricke")
		(setq user-mail-address "s.fricke@tu-bs.de"))

	  (defun set-icg-smtp ()
		(setq send-mail-function (quote smtpmail-send-it))
		(setq smtpmail-smtp-server "europa.cg.cs.tu-bs.de")
		(setq smtpmail-smtp-service 465)
		(setq smtpmail-stream-type 'ssl)
		(setq user-full-name "Sascha Fricke")
		(setq user-mail-address "fricke@cg.cs.tu-bs.de"))

	  (defun set-gmail-smtp ()
		(setq send-mail-function (quote smtpmail-send-it))
		(setq smtpmail-smtp-server "smtp.gmail.com")
		(setq smtpmail-smtp-service 465)
		(setq smtpmail-stream-type 'ssl)
		(setq user-full-name "Sascha Fricke")
		(setq user-mail-address "sascha.frigge@gmail.com"))

	;; (set-tubs-smtp)
	(set-icg-smtp)
	;; (set-gmail-smtp)
#+end_src
** mu4e
#+begin_src emacs-lisp
  (require 'mu4e)
  (custom-set-variables
   '(mu4e-attachment-dir "~/Downloads")
   '(mu4e-compose-signature-auto-include t)
   '(mu4e-drafts-folder "/drafts")
   '(mu4e-get-mail-command "mbsync -a")
   '(mu4e-maildir "~/.mail")
   '(mu4e-refile-dir "/archive")
   '(mu4e-sent-folder "/sent")
   '(mu4e-trash-folder "/trash")
   '(mu4e-update-interval 300)
   '(mu4e-use-fancy-chars t)
   '(mu4e-view-show-address t)
   '(org-mu4e-convert-to-html t)
   '(mu4e-view-show-images t))
  (add-to-list 'mu4e-view-actions '("ViewInBrowser" . mu4e-action-view-in-browser) t)

  (add-to-list 'mu4e-bookmarks
	       (make-mu4e-bookmark
		:name "PhoenixD"
		:query "subject:phoenixd OR from:phoenixd"
		:key ?h))
  (require 'org-mu4e)
  (defalias 'org-mail 'org-mu4e-compose-org-mode)

  (add-hook 'mu4e-compose-post-hook
	    (defun do-compose-stuff ()
	      "My settings for message composition."
	      (org-mu4e-compose-org-mode)))

  (defun htmlize-and-send ()
    "When in an org-mu4e-compose-org-mode message, htmlize and send it."
    (interactive)
    (when (member 'org~mu4e-mime-switch-headers-or-body post-command-hook)
      (org-mime-htmlize)
      (org-mu4e-compose-org-mode)
      (mu4e-compose-mode)
      (message-send-and-exit)))
#+end_src

* mu4e-alert
#+begin_src emacs-lisp
  (use-package mu4e-alert
  :ensure t
  :hook ((after-init . mu4e-alert-enable-mode-line-display))
	:config (mu4e-alert-set-default-style 'libnotify)
			 (mu4e-alert-enable-notifications))
#+end_src

* projectile
#+begin_src emacs-lisp
  (use-package projectile
	:config (setq projectile-mode t)
	(define-key space-map (kbd "p") 'projectile-command-map)
	(setq projectile-tags-command "ctags -Re -f '%s' --fields=+iaSt --extra=+q --exclude='.git' %s"))
#+end_src

** org-projectile
#+begin_src emacs-lisp
  (use-package org-projectile
	:bind (:map space-map ("c p" . org-projectile-project-todo-completing-read))
	:config (progn (org-projectile-per-project)
				   (setq org-projectile-per-repo-filepath "project_todo.org")
				   (setq org-agenda-files (append org-agenda-files (org-projectile-todo-files)))))
#+end_src

* ag
#+begin_src emacs-lisp
  (use-package ag
    :config (setq ag-group-matches nil))
#+end_src

* wgrep
#+begin_src emacs-lisp
  (use-package wgrep :ensure t)
  (use-package wgrep-ag :ensure t)
#+end_src

* calfw
#+begin_src emacs-lisp
  (straight-use-package '(emacs-calfw :type git :host github :repo "zemaye/emacs-calfw"))
  (require 'calfw)
  (require 'calfw-org)
  (setq cfw:org-overwrite-default-keybinding t)
#+end_src
* ctags
#+begin_src emacs-lisp
  (setq ctags-update-command "/usr/bin/ctags")
  (setq ctags-update-delay-seconds 10)
  (setq ctags-update-other-options
		(quote
		 ("--fields=+iaSt"
		  "--extra=+q"
		  "--exclude='*.elc'"
		  "--exclude='*.class'"
		  "--exclude='.git'"
		  "--exclude='.svn'"
		  "--exclude='SCCS'"
		  "--exclude='RCS'"
		  "--exclude='CVS'"
		  "--exclude='EIFGEN'"
		  "-R"
		  "-e")))
#+end_src

* flycheck
#+begin_src emacs-lisp
  ;; (use-package flycheck
  ;;   :config (global-flycheck-mode))
#+end_src

* magit
#+begin_src emacs-lisp
  (use-package magit
	:defer t)
#+end_src 

* smerge
#+begin_src emacs-lisp
  (require 'smerge-mode)
  (define-key space-map (kbd "s s") 'smerge-mode)

  (defun my-smerge-bindings ()
    (define-key space-map (kbd "s RET") 'smerge-keep-current)
    (define-key space-map (kbd "s d m") 'smerge-diff-base-mine)
    (define-key space-map (kbd "s d o") 'smerge-diff-base-other)
    (define-key space-map (kbd "s d b") 'smerge-diff-mine-other)

    (define-key space-map (kbd "s C") 'smerge-combine-with-next)
    (define-key space-map (kbd "s E") 'smerge-ediff)
    (define-key space-map (kbd "s R") 'smerge-refine)
    (define-key space-map (kbd "s a") 'smerge-keep-all)
    (define-key space-map (kbd "s b") 'smerge-keep-base)
    (define-key space-map (kbd "s m") 'smerge-keep-mine)
    (define-key space-map (kbd "s n") 'smerge-next)
    (define-key space-map (kbd "s o") 'smerge-keep-other)
    (define-key space-map (kbd "s p") 'smerge-prev)
    (define-key space-map (kbd "s r") 'smerge-resolve))

  (add-hook 'smerge-mode-hook 'my-smerge-bindings)
#+end_src 
* extra file type modes
  
** cuda-mode
dont use cuda-mode for now as it doesnt work with smart-indent

#+begin_src emacs-lisp
  (use-package cuda-mode
  :disabled t)
#+end_src

just load c++ mode for cuda files
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.cu\\'" . c++-mode))
  (add-to-list 'auto-mode-alist '("\\.cuh\\'" . c++-mode))
#+end_src

** opencl-mode
#+begin_src emacs-lisp
  (use-package opencl-mode
  :disabled t)
#+end_src

** glsl-mode
#+begin_src emacs-lisp
  (use-package glsl-mode)

  (add-to-list 'auto-mode-alist '("\\.comp\\'" . glsl-mode))
  (add-to-list 'auto-mode-alist '("\\.rgen\\'" . glsl-mode))
  (add-to-list 'auto-mode-alist '("\\.rchit\\'" . glsl-mode))
  (add-to-list 'auto-mode-alist '("\\.rahit\\'" . glsl-mode))
  (add-to-list 'auto-mode-alist '("\\.rmiss\\'" . glsl-mode))
 
#+end_src

** conf-mode for mtstudio files
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.rg\\'" . conf-mode))
  (add-to-list 'auto-mode-alist '("\\.scn\\'" . conf-mode))

#+end_src

* lsp-mode

#+begin_src emacs-lisp
  (use-package lsp-mode
	:hook (c++-mode . lsp) (c-mode . lsp) (pyhton-mode . lsp)
	:disabled t)
  (use-package lsp-ui :commands lsp-ui-mode
	:disabled t)
  (use-package company-lsp :commands company-lsp
	:disabled t)
  (use-package helm-lsp :commands helm-lsp-workspace-symbol
	:disabled t)
#+end_src

** dap-mode
#+begin_src emacs-lisp
  (use-package dap-mode
	:disabled t)
  ;; (require 'dap-gdb-lldb)
  ;; (require 'dap-python)
#+end_src

* c++
** semantic-refactor
#+begin_src emacs-lisp
  (use-package srefactor
	:disabled t)

  ;; (require 'srefactor)
  ;; (require 'srefactor-lisp)
  ;; (semantic-mode 1)
  ;; (define-key space-map (kbd "SPC R") 'srefactor-refactor-at-point)
  ;; (define-key space-map (kbd "SPC R") 'srefactor-refactor-at-point)
#+end_src

** C Style Formatting
#+begin_src emacs-lisp
	  (setq indent-tabs-mode nil)

	  (defconst my-cc-style
		'("user"
		  (c-basic-offset . 4)
		  (c-offsets-alist
		   (innamespace . 0))))
	  (c-add-style "my-cc-style" my-cc-style)

	  (setq c-default-style
			(quote
			 ((java-mode . "java")
			  (awk-mode . "awk")
			  (python-mode . "python")
			  (cc-mode . "my-cc-style")
			  (other . "user"))))
	  (setq-default tab-width 4)
	  (setq-default default-tab-width 4)
#+end_src
** cmake-mode
#+begin_src emacs-lisp
  (use-package cmake-mode)
#+end_src

** cmake-ide
#+begin_src emacs-lisp
  (use-package cmake-ide
	:config (cmake-ide-setup)
	:disabled t)
#+end_src

*set cmake-build-dir to current dir* 

small helper function to quickly set the build dir for cmake-ide to
the current directory from eshell.

#+begin_src emacs-lisp
  ;; (defun set-cmake-ide-build-dir () 
  ;;   "sets cmake-build-dir variable to default-directory
  ;;   intended to be called from eshell to quickly set the cmake build directory"
  ;;   (setq cmake-build-dir default-directory))
#+end_src

** clang-format
#+begin_src emacs-lisp
  (use-package clang-format
               :config (define-key evil-normal-state-map (kbd "SPC c f") 'clang-format-region))
#+end_src

* tabify/untabify shortcuts
#+begin_src emacs-lisp
  (define-key space-map (kbd "t t") 'tabify)
  (define-key space-map (kbd "t u") 'untabify)
#+end_src

* Python
#+begin_src emacs-lisp
  (setq python-shell-interpreter "ipython3")
  (setq python-shell-interpreter-args "--simple-prompt -i")
  (push "ipython3" python-shell-completion-native-disabled-interpreters)
#+end_src

** Jupyter / IPython notebooks
#+begin_src emacs-lisp
  (use-package ein 
	:disabled t)
#+end_src

* Debugging
** GDB
 #+begin_src emacs-lisp
   (setq gdb-dispaly-io-nopopup t)
 #+end_src
** realgud
 #+begin_src emacs-lisp
   ;; (use-package realgud)
 #+end_src
* pdftools
#+begin_src emacs-lisp
  (use-package pdf-tools
               :config (pdf-tools-install))

#+end_src
* Paperless
#+begin_src emacs-lisp
  (use-package paperless
	:config (custom-set-variables '(paperless-capture-directory "~/Documents/capture")
								  '(paperless-root-directory "/mnt/piland/sascha/documents/paperless")))
			
(require 'org-paperless)

#+end_src

* default browser
#+begin_src emacs-lisp
  (setq browse-url-generic-program "vivaldi-stable")
  (setq browse-url-browser-function 'browse-url-generic)
#+end_src

* latex
** auctex
#+begin_src emacs-lisp
  (use-package tex :ensure auctex)
  (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
		TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
		TeX-source-correlate-start-server t)
  (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
#+end_src

** biblatex
   set default bibtex dialect
#+begin_src emacs-lisp
  (setq bibtex-dialect 'biblatex)
#+end_src

gscholar references  (as alternative to org-ref)
#+begin_src emacs-lisp
  (use-package gscholar-bibtex
	:ensure t
	:bind (:map space-map ("r g" . gscholar-bibtex))
	:config (setq gscholar-bibtex-database-file
				   "/mnt/piland/sascha/documents/research/bib.bib")
			 (setq gscholar-bibtex-default-source "Google Scholar"))
#+end_src

** reftex default bibliography
   
#+begin_src emacs-lisp
(setq reftex-default-bibliography '("/mnt/piland/sascha/documents/research/bib.bib"))
#+end_src

* start emacs server
#+begin_src emacs-lisp
(server-start)
#+end_src
